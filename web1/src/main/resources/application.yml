server:
  port: 8081
  tomcat:
    uri-encoding: UTF-8

# datasource
spring:
  datasource:
      url: jdbc:mysql://localhost:3306/test?characterEncoding=utf8
      username: root
      password: root
  jpa:
    database: MYSQL
    show-sql: true
  ## Hibernate ddl auto (validate|create|create-drop|update)
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
#security是OAuth2的配置
security:
  ignored: /favicon.ico,/scripts/**,/styles/**,/images/**
  sessions: ALWAYS
  oauth2:
      sso:
      #loginPath是一个登录的链接地址
        loginPath: /login
      client:
      #clientid和clientSecret是由sso认证服务器提供的客户端ID和秘钥
        clientId: ssoclient
        clientSecret: ssosecret
       #accessTokenUri是取得令牌的链接地址
        accessTokenUri: http://localhost/oauth/token
        #userAuthorizationUri是用户授权确认的链接地址
        userAuthorizationUri: http://localhost/oauth/authorize
        clientAuthenticationScheme: form
      resource:
        jwt:
        #keyUri是当客户端被指定为资源服务器所用的令牌链接地址
          keyUri: http://localhost/oauth/token_key
#securityconfig 是spring security的配置
securityconfig:
  #logoutsuccessurl是一个登出成功的链接地址
  logoutsuccssurl: /tosignout
  permitall: /rest/**,/bb**
  deniedpage: /deny
  #urlroles配置一个权限配置列表，这是自己设计的一种权限管理规则，列表中的每一个配置项用分号分隔，每一个配置项的等号左边是一个可以带上统配符的链接地址，等号右边是一个角色列表，角色之间用逗号分隔
  urlroles: /**/new/** = admin;
            /**/edit/** = admin,editor;
            /**/delete/** = admin